{"version":3,"sources":["templates.js","state.js","tree.js"],"names":["ComponentTemplate","Templates","name","defaultAttributes","attributes","createComponent","elem","template","children","forEach","child","assignParts","$","Map","newValue","value","nodes","entries","bindPart","key","part","parsedPart","replace","parent","parentElement","document","body","has","get","push","set","assignAttributes","attr","includes","bindState","State","stateKey","undefined","Array","isArray","textContent","newState","stateValue","node","nodeType","tagName","stateHTML","innerHTML","innerText","setState","getState","Tree","createElement","x","arguments","length","Element","id","className","class","appendChild","createChild","createChildren","createElements","createTextNode","createNode","state","childElements","text"],"mappings":"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","file":"tree.map","sourceRoot":"src","sourcesContent":["import {createElement} from './tree'\n\nvar Templates = {}\n\nclass ComponentTemplate {\n  constructor (name, defaultAttributes) {\n    Templates[name] = this\n    this.attributes = defaultAttributes\n  }\n}\n\nfunction createComponent (elem, template) {\n  assignAttributes(elem, Templates[template].attributes)\n  Templates[template].children.forEach(child => {\n    createElement(child, elem)\n  })\n}\n\nfunction assignParts (elem, attributes) {\n  elem.$ = {}\n  for (let $ in attributes) {\n    elem.$[$] = {\n      value: attributes[$],\n      nodes: new Map(),\n      get: function () { return true },\n      set: function (newValue) {\n        this.value = newValue\n        for (let [key, value] of this.nodes.entries()) {\n          key[value] = this.value\n        }\n      }\n    }\n  }\n}\n\nfunction bindPart (elem, key, part) {\n  let parsedPart = part.replace('$', '')\n  let parent = elem.parentElement\n  while ((!parent.$ || !parent.$[parsedPart]) && parent !== document.body) {\n    parent = elem.parentElement\n  }\n  if (parent.$[parsedPart]) {\n    elem[key] = parent.$[parsedPart].value\n    if (parent.$[parsedPart].nodes.has(elem)) parent.$[parsedPart].nodes.get(elem).push(key)\n    else parent.$[parsedPart].nodes.set(elem, [key])\n  }\n}\n\nfunction assignAttributes (elem, attributes) {\n  if (attributes.$) assignParts(elem, attributes.$)\n  if (attributes.template && Templates[attributes.template]) createComponent(elem, attributes.template)\n  delete attributes.$\n  for (let attr in attributes) {\n    if (attr === 'tagName') continue\n    if (attributes[attr][0] === '$' && attributes[attr][0].includes(' ') === false) bindPart(elem, attr, attributes[attr])\n    else elem[attr] = attributes[attr]\n  }\n}\n\nexport {assignAttributes, ComponentTemplate}\n","var State = {}\n\nfunction bindState (stateKey) {\n  if (State[stateKey] === undefined) {\n    newState(stateKey)\n    State[stateKey].nodes.push(this)\n  } else if (Array.isArray(State[stateKey].nodes) === false) {\n    return false\n  } else {\n    State[stateKey].nodes.push(this)\n    this.textContent = State[stateKey].value\n    return true\n  }\n}\n\nfunction newState (stateKey, stateValue) {\n  State[stateKey] = {\n    nodes: [],\n    value: stateValue || '',\n    get: function () {\n      return this.value\n    },\n    set: function (newValue) {\n      this.value = newValue\n      this.nodes.forEach(node => {\n        if (node.nodeType === 3) node.textContent = newValue\n        else if (node.tagName === 'input') node.value = newValue\n        else if (node.stateHTML) node.innerHTML = newValue\n        else node.innerText = newValue\n      })\n    }\n  }\n  return true\n}\n\nfunction setState (stateKey, stateValue) {\n  if (State[stateKey] === undefined) newState(stateKey, stateValue)\n  else State[stateKey] = stateValue\n}\n\nfunction getState (stateKey) {\n  return State[stateKey].value\n}\n\nexport {setState, getState, bindState}\n","/* global Element */\n\nimport {assignAttributes, ComponentTemplate} from './templates'\nimport {setState, getState, bindState} from './state'\n\nvar Tree = {\n  id: {},\n  class: {},\n  node: {}\n}\n\nfunction createElement () {\n  let tagName = 'div'\n  let attributes = {}\n  let parentElement = this || document.body\n  for (let x = 0; x < arguments.length; x++) {\n    if (arguments[x] instanceof Element) parentElement = arguments[x]\n    else if (typeof arguments[x] === 'string') tagName = arguments[x]\n    else if (typeof arguments[x] === 'object') attributes = arguments[x]\n  }\n  if (attributes.tagName) {\n    tagName = attributes.tagName\n  }\n\n  let elem = document.createElement(tagName)\n  if (attributes.id) {\n    Tree.id[attributes.id] = elem\n  }\n  if (attributes.className) {\n    if (Array.isArray(Tree.class[attributes.className])) Tree.class[attributes.className].push(elem)\n    else Tree.class[attributes.className] = [elem]\n  }\n  parentElement.appendChild(elem)\n  elem.createChild = createElement\n  elem.createChildren = createElements\n  elem.createTextNode = createNode\n  elem.bindState = bindState\n  if (attributes.state || attributes.stateHTML) elem.bindState(attributes.state || attributes.stateHTML)\n  assignAttributes(elem, attributes)\n  return elem\n}\n\nfunction createElements (children, parentElement) {\n  parentElement = parentElement || this || document.body\n  if (Array.isArray(children) === false) return false\n  let childElements = []\n  for (let x = 0; x < children.length; x++) {\n    childElements.push(createElement(children[x], parentElement))\n  }\n  return childElements\n}\n\nfunction createNode (text, parentElement, id) {\n  if (!id && typeof parentElement === 'string') id = parentElement\n  else if (parentElement instanceof Element === false) parentElement = this || document.body\n  let node = document.createTextNode(text || '')\n  parentElement.appendChild(node)\n  if (id) Tree.node[id] = node\n  node.bindState = bindState\n  return node\n}\n\nexport {createElement, createElements, createNode, Tree, setState, getState, ComponentTemplate}\n"]}