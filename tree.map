{"version":3,"sources":["elements.js","tree.js"],"names":["elements","dropDownElement","element","getState","tree","State","createElement","tagName","attributes","parentElement","document","body","elem","Object","assign","id","className","Array","isArray","class","push","appendChild","createChild","createChildren","createElements","createTextNode","createNode","bindState","state","stateHTML","children","childElements","x","length","text","node","stateKey","undefined","nodes","textContent","value","newState","stateValue","newValue","forEach","nodeType","innerHTML","innerText","setState"],"mappings":"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","file":"tree.map","sourceRoot":"src","sourcesContent":["const elements = {\n  dropdown: dropDownElement\n}\n\nfunction dropDownElement (element) {\n\n}\n\nexport default elements\n","import elements from './elements'\n\nvar tree = {\n  id: {},\n  class: {},\n  node: {}\n}\n\nvar State = {}\n\nfunction createElement (tagName, attributes, parentElement) {\n  if (typeof tagName === 'object') {\n    parentElement = attributes\n    attributes = tagName\n    if (attributes.tagName) {\n      tagName = attributes.tagName\n      delete attributes.tagName\n    } else tagName = 'div'\n  } else tagName = tagName || 'div'\n  parentElement = parentElement || this || document.body\n  let elem = document.createElement(tagName)\n  if (typeof attributes === 'object' && attributes) Object.assign(elem, attributes)\n  if (attributes.id) {\n    tree.id[attributes.id] = elem\n  }\n  if (attributes.className) {\n    if (Array.isArray(tree.class[attributes.className])) tree.class[attributes.className].push(elem)\n    else tree.class[attributes.className] = [elem]\n  }\n  parentElement.appendChild(elem)\n  elem.createChild = createElement\n  elem.createChildren = createElements\n  elem.createTextNode = createNode\n  elem.bindState = bindState\n  if (attributes.state || attributes.stateHTML) elem.bindState(attributes.state || attributes.stateHTML)\n  if (elements[tagName]) elements[tagName](elem)\n  return elem\n}\n\nfunction createElements (children, parentElement) {\n  parentElement = parentElement || this || document.body\n  if (Array.isArray(children) === false) return false\n  let childElements = []\n  for (let x = 0; x < children.length; x++) {\n    childElements.push(createElement(children[x], parentElement))\n  }\n  return childElements\n}\n\nfunction createNode (text, parentElement, id) {\n  parentElement = parentElement || this || document.body\n  let node = document.createTextNode(text || '')\n  parentElement.appendChild(node)\n  if (id) tree.node[id] = node\n  node.bindState = bindState\n  return node\n}\n\nfunction bindState (stateKey) {\n  if (State[stateKey] === undefined) {\n    newState(stateKey)\n    State[stateKey].nodes.push(this)\n  } else if (Array.isArray(State[stateKey].nodes) === false) {\n    return false\n  } else {\n    State[stateKey].nodes.push(this)\n    this.textContent = State[stateKey].value\n    return true\n  }\n}\n\nfunction newState (stateKey, stateValue) {\n  State[stateKey] = {\n    nodes: [],\n    value: stateValue || '',\n    get: function () {\n      return this.value\n    },\n    set: function (newValue) {\n      this.value = newValue\n      this.nodes.forEach(node => {\n        if (node.nodeType === 3) node.textContent = newValue\n        else if (node.tagName === 'input') node.value = newValue\n        else if (node.stateHTML) node.innerHTML = newValue\n        else node.innerText = newValue\n      })\n    }\n  }\n  return true\n}\n\nfunction setState (stateKey, stateValue) {\n  if (State[stateKey] === undefined) newState(stateKey, stateValue)\n  else State[stateKey] = stateValue\n}\n\nfunction getState (stateKey) {\n  return State[stateKey]\n}\n\nexport {createElement, createElements, createNode, tree, setState, getState}\n"]}