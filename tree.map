{"version":3,"sources":["elements.js","tree.js"],"names":["elements","dropdown","dropDownElement","element","tree","id","class","node","createElement","tagName","attributes","parentElement","document","body","elem","Object","assign","className","Array","isArray","push","appendChild","createChild","createChildren","createTextNode","createNode","children","childElements","x","length","text","bind","bindState","stateKey","state","undefined","nodes","value","get","set","newValue","forEach","textContent"],"mappings":"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","file":"tree.map","sourceRoot":"src","sourcesContent":["const elements = {\n  dropdown: dropDownElement\n}\n\nfunction dropDownElement (element) {\n\n}\n\nexport default elements\n","import elements from './elements'\n\nvar tree = {\n  id: {},\n  class: {},\n  node: {}\n}\n\nfunction createElement (tagName, attributes, parentElement) {\n  if (typeof tagName === 'object') {\n    parentElement = attributes\n    attributes = tagName\n    if (attributes.tagName) {\n      tagName = attributes.tagName\n      delete attributes.tagName\n    } else tagName = 'div'\n  } else tagName = tagName || 'div'\n  parentElement = parentElement || this || document.body\n  let elem = document.createElement(tagName)\n  if (typeof attributes === 'object' && attributes) Object.assign(elem, attributes)\n  if (attributes.id) {\n    tree.id[attributes.id] = elem\n  }\n  if (attributes.className) {\n    if (Array.isArray(tree.class[attributes.className])) tree.class[attributes.className].push(elem)\n    else tree.class[attributes.className] = [elem]\n  }\n  parentElement.appendChild(elem)\n  elem.createChild = createElement\n  elem.createChildren = createChildren\n  elem.createTextNode = createNode\n  if (elements[tagName]) elements[tagName](elem)\n  return elem\n}\n\nfunction createChildren (children) {\n  if (Array.isArray(children) === false) return false\n  let childElements = []\n  for (let x = 0; x < children.length; x++) {\n    childElements.push(this.createChild(children[x]))\n  }\n  return childElements\n}\n\nfunction createNode (text, parentElement, id) {\n  parentElement = parentElement || this || document.body\n  let node = document.createTextNode(text || '')\n  parentElement.appendChild(node)\n  if (id) tree.node[id] = node\n  node.bind = bindState\n  return node\n}\n\nfunction bindState (stateKey) {\n  if (tree.state[stateKey] === undefined) {\n    tree.state[stateKey] = {\n      nodes: [this],\n      value: '',\n      get: function () {\n        return this.value\n      },\n      set: function (newValue) {\n        this.value = newValue\n        this.nodes.forEach(node => {\n          node.textContent = newValue\n        })\n      }\n    }\n    return true\n  } else if (Array.isArray(tree.state[stateKey].nodes) === false) {\n    return false\n  } else {\n    tree.state[stateKey].nodes.push(this)\n    return true\n  }\n}\n\nexport {createElement, createNode, tree}\n"]}